Main = API.check_all

// Prelude
// -------

// U60.if -(r: Type) U60 r r : r
(U60.if 0 then else) = else
(U60.if 1 then else) = then

// U60.equal U60 U60 : Bool
(U60.equal a b) = (U60.if (== a b) True False)

// U60.max U60 U60 : Bool
(U60.max a b) = (U60.if (> a b) a b)

// Name.length Name : U60
(Name.length name) = (String.length (Show.name name))

// If -(r: Type) Bool r r : r
(If False then else) = else
(If True  then else) = then

// Bool.and Bool Bool : Bool
(Bool.and True  b) = b
(Bool.and False b) = False

// Bool.or Bool Bool : Bool
(Bool.or True  b) = True
(Bool.or False b) = b

// Maybe.case -(a: Type) -(r: Type) (Maybe a) r (a -> r) : r
(Maybe.case None       none some) = none
(Maybe.case (Some val) none some) = (some val)

// List.at -(a: Type) (List a) U60 : (Maybe a)
(List.at (Cons x xs) 0) = (Some x)
(List.at (Cons x xs) n) = (List.at xs (- n 1))
(List.at Nil         n) = None

// List.tail -(a: Type) (List a) : (List a)
(List.tail (Cons x xs)) = xs
(List.tail Nil)         = Nil

// List.reverse -(a: Type) (List a) : (List a)
(List.reverse xs) = (List.reverse.go xs [])

// List.reverse.go -(a: Type) (List a) (List a) : (List a)
(List.reverse.go Nil         res) = res
(List.reverse.go (Cons x xs) res) = (List.reverse.go xs (Cons x res))

// String.concat String String : String
(String.concat String.nil         ys) = ys
(String.concat (String.cons x xs) ys) = (String.cons x (String.concat xs ys))

// String.is_empty String : Bool
(String.is_empty String.nil) = True
(String.is_empty other)      = False

// String.length String : U60
(String.length String.nil)         = 0
(String.length (String.cons x xs)) = (+ 1 (String.length xs))

// String.pad_right (str: String) (chr: U60) (len: U60) : String
(String.pad_right str                chr 0)   = String.nil
(String.pad_right (String.cons x xs) chr len) = (String.cons x   (String.pad_right xs         chr (- len 1)))
(String.pad_right String.nil         chr len) = (String.cons chr (String.pad_right String.nil chr (- len 1)))

// String.equal (a: String) (b: String) : Bool
//(String.equal (String.cons a as) (String.cons b bs)) = (If (U60.equal a b) (String.equal as bs) False) 
//(String.equal String.nil         String.nil)         = True
//(String.equal as                 bs)                 = False

// Text (List String) : String
(Text Nil)         = String.nil
(Text (Cons x xs)) = (String.concat x (Text xs))

// Color String : String
(Color x) = (Text [ (String.cons 27 String.nil) "[" x "m" ])

// Line : String
Line = (String.cons 10 String.nil)

// Context
// -------

// type Context {
//   Empty : Context
//   (Entry (name: U60) (type: Term) (vals: (List Term))) : Context
// }

// Context.extend U60 Term (List Term) : Context
(Context.extend (Entry name type vals rest) n t v) = (Entry name type vals (Context.extend rest n t v))
(Context.extend Empty                       n t v) = (Entry n t v Empty)

// Context.add_value Context U60 Term : Context
(Context.add_value (Entry name type vals rest) 0 val) = (Entry name type (Cons val vals) rest)
(Context.add_value (Entry name type vals rest) n val) = (Entry name type vals (Context.add_value rest (- n 1) val))
(Context.add_value Empty                       n val) = Empty

// Context.find -(r: Type) Context U60 r (U60 -> Term -> (List Term) -> r) : r
(Context.find (Entry name type vals rest) 0 d f) = (f name type vals)
(Context.find (Entry name type vals rest) i d f) = (Context.find rest (- i 1) d f)
(Context.find Empty                       i d f) = d

// Context.tail Context : Context
(Context.tail (Entry name type vals rest)) = rest
(Context.tail Empty)                       = Empty

// Context.is_empty Context : Context
(Context.is_empty (Entry name type vals rest)) = False
(Context.is_empty Empty)                       = True

// Context.max_name_length Context : U60
(Context.max_name_length Empty) = 0
(Context.max_name_length (Entry name type vals rest)) =
  (U60.max (Name.length name) (Context.max_name_length rest))

// Checker Monad
// -------------

// type Result (a : Type) {
//   (Checked (ctx: Context) (dep: U60) (rhs: Bool) (ret: a))
//   (Errored (ctx: Context) Error)
// }

// type Checker (a : Type) = (context: (List Term)) (depth: U60) (rhs: Bool) (Result a)
  
// Checker.bind -(a: Type) -(b: Type) (Checker a) : (a -> Checker b) (Checker b)
(Checker.bind checker) = λnext λctx λdep λrhs ((Checker.bind.result (checker ctx dep rhs)) next)

// Checker.bind.result -(a: Type) -(b: Type) (Result a) : (a -> Checker b) (Result b)
(Checker.bind.result (Checked ctx dep rhs val)) = λnext (next val ctx dep rhs)
(Checker.bind.result (Errored ctx err))         = λnext (Errored ctx err)

// Checker.done -(a: Type) (x: a) : (Checker a)
(Checker.done val) = λctx λdep λrhs (Checked ctx dep rhs val)

// Checker.fail -(a: Type) (err: (List Term) -> U60 -> Error) : (Checker a)
(Checker.fail err) = λctx λdep λrhs (Errored ctx err)

// Checker.get_context -(a: Type) : (Checker Context)
(Checker.get_context) = λctx λdep λrhs
  (Checked ctx dep rhs ctx)

// Checker.get_depth -(a: Type) : (Checker U60)
(Checker.get_depth) = λctx λdep λrhs
  (Checked ctx dep rhs dep)

// Checker.get_right_hand_side -(a: Type) : (Checker U60)
(Checker.get_right_hand_side) = λctx λdep λrhs
  (Checked ctx dep rhs rhs)

// Checker.set_right_hand_side -(a: Type) Bool : (Checker Unit)
(Checker.set_right_hand_side rhs) = λctx λdep λold_rhs
  (Checked ctx dep rhs Unit)

// Checker.extend U60 Term (List Term) : (Checker Unit)
(Checker.extend name type vals) = λctx λdep λrhs
  (Checked (Context.extend ctx name type vals) (+ dep 1) rhs Unit)

// Checker.shrink -(a: Term) : (Checker Unit)
(Checker.shrink) = λctx λdep λrhs
  (Checked (Context.tail ctx) (- dep 1) rhs Unit)

// Checker.extended -(a: Type) (Checker a) U60 Term Term : (Checker a)
(Checker.extended checker name type vals) = 
  ask (Checker.bind (Checker.extend name type vals))
  ask got = (Checker.bind checker)
  ask (Checker.bind Checker.shrink)
  (Checker.done got)

// Checker.get_type_of -(r: Type) U60 r (U60 -> Term -> (List Term) -> r) : (Checker r)
(Checker.find idx d f) = λctx λdep λrhs
  (Checked ctx dep rhs (Context.find ctx idx d f))

// Checker.add_value -(a: Type) (idx: U60) (val: Term) : (Checker Unit)
(Checker.add_value idx val) = λctx λdep λrhs
  (Checked (Context.add_value ctx idx val) dep rhs Unit)

// Term utils
// ----------

// Term.if_all -(r: Type) Term (Term -> (Term -> Term) -> r) r : r
(Term.if_all (All orig name type body) then else) = (then type body)
(Term.if_all other                     then else) = else

// Term.orig
(Term.get_origin (Typ orig)) = orig
(Term.get_origin (Var orig name index)) = orig
(Term.get_origin (All orig name type body)) = orig
(Term.get_origin (Lam orig name body)) = orig
(Term.get_origin (App orig func argm)) = orig
(Term.get_origin (Let orig name expr body)) = orig
(Term.get_origin (Ann orig expr type)) = orig
(Term.get_origin (Ct0 name orig)) = orig
(Term.get_origin (Ct1 name orig a)) = orig
(Term.get_origin (Ct2 name orig a b)) = orig
(Term.get_origin (Ct3 name orig a b c)) = orig
(Term.get_origin (Ct4 name orig a b c d)) = orig
(Term.get_origin (Ct5 name orig a b c d e)) = orig
(Term.get_origin (Ct6 name orig a b c d e f)) = orig
(Term.get_origin (Ct7 name orig a b c d e f g)) = orig
(Term.get_origin (Ct8 name orig a b c d e f g h)) = orig
(Term.get_origin (Fn0 name orig)) = orig
(Term.get_origin (Fn1 name orig a)) = orig
(Term.get_origin (Fn2 name orig a b)) = orig
(Term.get_origin (Fn3 name orig a b c)) = orig
(Term.get_origin (Fn4 name orig a b c d)) = orig
(Term.get_origin (Fn5 name orig a b c d e)) = orig
(Term.get_origin (Fn6 name orig a b c d e f)) = orig
(Term.get_origin (Fn7 name orig a b c d e f g)) = orig
(Term.get_origin (Fn8 name orig a b c d e f g h)) = orig

// Term.set_origin
(Term.set_origin new_orig (Typ orig)) = (Typ new_orig)
(Term.set_origin new_orig (Var orig name index)) = (Var new_orig name index)
(Term.set_origin new_orig (All orig name type body)) = (All new_orig name type body)
(Term.set_origin new_orig (Lam orig name body)) = (Lam new_orig name body)
(Term.set_origin new_orig (App orig func argm)) = (App new_orig func argm)
(Term.set_origin new_orig (Let orig name expr body)) = (Let new_orig name expr body)
(Term.set_origin new_orig (Ann orig expr type)) = (Ann new_orig expr type)
(Term.set_origin new_orig (Ct0 name orig)) = (Ct0 name new_orig)
(Term.set_origin new_orig (Ct1 name orig a)) = (Ct1 name new_orig a)
(Term.set_origin new_orig (Ct2 name orig a b)) = (Ct2 name new_orig a b)
(Term.set_origin new_orig (Ct3 name orig a b c)) = (Ct3 name new_orig a b c)
(Term.set_origin new_orig (Ct4 name orig a b c d)) = (Ct4 name new_orig a b c d)
(Term.set_origin new_orig (Ct5 name orig a b c d e)) = (Ct5 name new_orig a b c d e)
(Term.set_origin new_orig (Ct6 name orig a b c d e f)) = (Ct6 name new_orig a b c d e f)
(Term.set_origin new_orig (Ct7 name orig a b c d e f g)) = (Ct7 name new_orig a b c d e f g)
(Term.set_origin new_orig (Ct8 name orig a b c d e f g h)) = (Ct8 name new_orig a b c d e f g h)
(Term.set_origin new_orig (Fn0 name orig)) = (Fn0 name new_orig)
(Term.set_origin new_orig (Fn1 name orig a)) = (Fn1 name new_orig a)
(Term.set_origin new_orig (Fn2 name orig a b)) = (Fn2 name new_orig a b)
(Term.set_origin new_orig (Fn3 name orig a b c)) = (Fn3 name new_orig a b c)
(Term.set_origin new_orig (Fn4 name orig a b c d)) = (Fn4 name new_orig a b c d)
(Term.set_origin new_orig (Fn5 name orig a b c d e)) = (Fn5 name new_orig a b c d e)
(Term.set_origin new_orig (Fn6 name orig a b c d e f)) = (Fn6 name new_orig a b c d e f)
(Term.set_origin new_orig (Fn7 name orig a b c d e f g)) = (Fn7 name new_orig a b c d e f g)
(Term.set_origin new_orig (Fn8 name orig a b c d e f g h)) = (Fn8 name new_orig a b c d e f g h)

// SO = Term.set_origin
(SO new_orig term) = (Term.set_origin new_orig term)

// Equal Term Term : (Checker Bool)
// --------------------------------

// Typ equality
(Equal (Typ orig) (Typ orig)) =
  (Checker.done True)

// All equality
(Equal (All a.orig a.name a.type a.body) (All b.orig b.name b.type b.body)) =
  ask dep  = (Checker.bind Checker.get_depth)
  ask type = (Checker.bind (Equal a.type b.type))
  ask body = (Checker.bind (Checker.extended (Equal (a.body (Var a.orig a.name dep)) (b.body (Var b.orig b.name dep))) Null Null Null))
  (Checker.done (Bool.and type body))

// Lam equality
(Equal (Lam a.orig a.name a.body) (Lam b.orig b.name b.body)) =
  ask dep  = (Checker.bind Checker.get_depth)
  ask body = (Checker.bind (Checker.extended (Equal (a.body (Var a.orig a.name dep)) (b.body (Var b.orig b.name dep))) Null Null Null))
  body

// App equality
(Equal (App a.orig a.func a.argm) (App b.orig b.func b.argm)) =
  ask func = (Checker.bind (Equal a.func b.func))
  ask argm = (Checker.bind (Equal a.argm b.argm))
  (Checker.done (Bool.and func argm))

// Let equality
(Equal (Let a.orig a.name a.expr a.body) (Let b.orig b.name b.expr b.body)) =
  ask dep  = (Checker.bind Checker.get_depth)
  ask expr = (Checker.bind (Equal a.expr b.expr))
  ask body = (Checker.bind (Checker.extended (Equal (a.body (Var a.orig a.name dep)) (b.body (Var b.orig b.name dep))) Null Null Null))
  (Checker.done (Bool.and expr body))

// Ann equality
(Equal (Ann a.orig a.expr a.type) (Ann b.orig b.expr b.type)) =
  ask expr = (Checker.bind (Equal a.expr b.expr))
  ask type = (Checker.bind (Equal a.type b.type))
  (Checker.done (Bool.and expr type))

// Ct0 equality
(Equal (Ct0 a.ctid a.orig) (Ct0 b.ctid b.orig)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  (Checker.done ctid)

// Ct1 equality
(Equal (Ct1 a.ctid a.orig a.x0) (Ct1 b.ctid b.orig b.x0)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  (Checker.done (Bool.and ctid x0))

// Ct2 equality
(Equal (Ct2 a.ctid a.orig a.x0 a.x1) (Ct2 b.ctid b.orig b.x0 b.x1)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  ask x1   = (Checker.bind (Equal a.x1 b.x1))
  (Checker.done (Bool.and ctid (Bool.and x0 x1)))

// Ct3 equality
(Equal (Ct3 a.ctid a.orig a.x0 a.x1 a.x2) (Ct3 b.ctid b.orig b.x0 b.x1 b.x2)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  ask x1   = (Checker.bind (Equal a.x1 b.x1))
  ask x2   = (Checker.bind (Equal a.x2 b.x2))
  (Checker.done (Bool.and ctid (Bool.and x0 (Bool.and x1 x2))))

// Ct4 equality
(Equal (Ct4 a.ctid a.orig a.x0 a.x1 a.x2 a.x3) (Ct4 b.ctid b.orig b.x0 b.x1 b.x2 b.x3)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  ask x1   = (Checker.bind (Equal a.x1 b.x1))
  ask x2   = (Checker.bind (Equal a.x2 b.x2))
  ask x3   = (Checker.bind (Equal a.x3 b.x3))
  (Checker.done (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 x3)))))

// Ct5 equality
(Equal (Ct5 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4) (Ct5 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  ask x1   = (Checker.bind (Equal a.x1 b.x1))
  ask x2   = (Checker.bind (Equal a.x2 b.x2))
  ask x3   = (Checker.bind (Equal a.x3 b.x3))
  ask x4   = (Checker.bind (Equal a.x4 b.x4))
  (Checker.done (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 x4))))))

// Ct6 equality
(Equal (Ct6 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5) (Ct6 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  ask x1   = (Checker.bind (Equal a.x1 b.x1))
  ask x2   = (Checker.bind (Equal a.x2 b.x2))
  ask x3   = (Checker.bind (Equal a.x3 b.x3))
  ask x4   = (Checker.bind (Equal a.x4 b.x4))
  ask x5   = (Checker.bind (Equal a.x5 b.x5))
  (Checker.done (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 x5)))))))

// Ct7 equality
(Equal (Ct7 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6) (Ct7 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  ask x1   = (Checker.bind (Equal a.x1 b.x1))
  ask x2   = (Checker.bind (Equal a.x2 b.x2))
  ask x3   = (Checker.bind (Equal a.x3 b.x3))
  ask x4   = (Checker.bind (Equal a.x4 b.x4))
  ask x5   = (Checker.bind (Equal a.x5 b.x5))
  ask x6   = (Checker.bind (Equal a.x6 b.x6))
  (Checker.done (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 x6))))))))

// Ct8 equality
(Equal (Ct8 a.ctid a.orig a.x0 a.x1 a.x2 a.x3 a.x4 a.x5 a.x6 a.x7) (Ct8 b.ctid b.orig b.x0 b.x1 b.x2 b.x3 b.x4 b.x5 b.x6 b.x7)) =
  let ctid = (U60.equal (HashOf a.ctid) (HashOf b.ctid))
  ask x0   = (Checker.bind (Equal a.x0 b.x0))
  ask x1   = (Checker.bind (Equal a.x1 b.x1))
  ask x2   = (Checker.bind (Equal a.x2 b.x2))
  ask x3   = (Checker.bind (Equal a.x3 b.x3))
  ask x4   = (Checker.bind (Equal a.x4 b.x4))
  ask x5   = (Checker.bind (Equal a.x5 b.x5))
  ask x6   = (Checker.bind (Equal a.x6 b.x6))
  ask x7   = (Checker.bind (Equal a.x7 b.x7))
  (Checker.done (Bool.and ctid (Bool.and x0 (Bool.and x1 (Bool.and x2 (Bool.and x3 (Bool.and x4 (Bool.and x5 (Bool.and x6 x7)))))))))

// Var equality #0
(Equal (Var a.orig a.name a.index) b) =
  ask rhs = (Checker.bind (Checker.get_right_hand_side))
  (Equal.var rhs a.orig a.name a.index b)

// Var equality #1
(Equal a (Var b.orig b.name b.index)) =
  ask rhs = (Checker.bind (Checker.get_right_hand_side))
  (Equal.var rhs b.orig b.name b.index a)

// Not equal
(Equal a b) =
  (Checker.done False)

// Equal.var (rhs : Bool) (index : U60) (b: Term) : (Checker bool)
// ---------------------------------------------------------------
// A variable is equal to a term when any of its reductions is

// If on LHS, extend the variable's equality list
// If on RHS, check if a and b are equal

// Var-Var checker
(Equal.var False a.orig a.name a.index b) =
  ask (Checker.bind (Checker.add_value a.index b))
  (Checker.done True)
(Equal.var True a.orig a.name a.index (Var b.orig b.name b.index)) =
  (If (U60.equal a.index b.index)
    (Checker.done True)
    ask a.val = (Checker.bind (Checker.find a.index [] λnλtλv(v)))
    ask b.val = (Checker.bind (Checker.find b.index [] λnλtλv(v)))
    ask a.chk = (Checker.bind (Equal.var.try_values a.val (Var b.orig b.name b.index)))
    ask b.chk = (Checker.bind (Equal.var.try_values b.val (Var a.orig a.name a.index)))
    (Checker.done (Bool.or a.chk b.chk)))
(Equal.var True a.orig a.name a.index b) =
  ask a.val = (Checker.bind (Checker.find a.index [] λnλtλv(v)))
  (Equal.var.try_values a.val b)

// Checks if any of a set of reductions is equal
(Equal.var.try_values (Cons a as) b) =
  ask head = (Checker.bind (Equal a b))
  (If head
    (Checker.done True)
    (Equal.var.try_values as b))
(Equal.var.try_values Nil b) =
  (Checker.done False)

// Infer Term : (Checker Term)
// ---------------------------

// Infers Var
(Infer (Var orig name index)) =
  ask got_type = (Checker.bind (Checker.find index None λnλtλv(Some t)))
  (Maybe.case got_type
    (Checker.fail (UnboundVariable (Var orig name index)))
    λvar_type (Checker.done var_type))

// Infers Typ
(Infer (Typ orig)) =
  (Checker.done (Typ orig))

// Infers All
(Infer (All orig name type body)) =
  ask dep      = (Checker.bind Checker.get_depth)
  ask type_chk = (Checker.bind (Check type (Typ orig)))
  ask body_chk = (Checker.bind (Checker.extended (Check (body (Var orig name dep)) (Typ orig)) name type []))
  (Checker.done (Typ orig))

// Infers Lam
(Infer (Lam orig name body)) =
  (Checker.fail (CantInferLambda (Lam orig name body)))

// Infers App
(Infer (App orig func argm)) =
  ask func_typ = (Checker.bind (Infer func))
  (Term.if_all func_typ
    // then
    λfunc_typ_type λfunc_typ_body
      ask argm_ok = (Checker.bind (Check argm func_typ_type))
      (Checker.done (func_typ_body argm))
    // else
    (Checker.fail (InvalidCall (App orig func argm))))

// Infers Let
(Infer (Let orig name expr body)) =
  ask dep      = (Checker.bind Checker.get_depth)
  ask expr_typ = (Checker.bind (Infer expr))
  ask body_typ = (Checker.bind (Checker.extended (Infer (body (Var orig name dep))) name expr_typ []))
  (Checker.done body_typ)

// Infers Ann
(Infer (Ann orig expr type)) =
  ask expr_chk = (Checker.bind (Check expr type))
  (Checker.done type)

// Infers Ct0
(Infer (Ct0 ctid orig)) =
  (Checker.done (TypeOf ctid))

// Infers Ct1
(Infer (Ct1 ctid orig x0)) =
  (Infer (App orig (Ct0 ctid orig) x0))

// Infers Ct2
(Infer (Ct2 ctid orig x0 x1)) =
  (Infer (App orig (App orig (Ct0 ctid orig) x0) x1))

// Infers Ct3
(Infer (Ct3 ctid orig x0 x1 x2)) =
  (Infer (App orig (App orig (App orig (Ct0 ctid orig) x0) x1) x2))

// Infers Ct4
(Infer (Ct4 ctid orig x0 x1 x2 x3)) =
  (Infer (App orig (App orig (App orig (App orig (Ct0 ctid orig) x0) x1) x2) x3))

// Infers Ct5
(Infer (Ct5 ctid orig x0 x1 x2 x3 x4)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (Ct0 ctid orig) x0) x1) x2) x3) x4))

// Infers Ct6
(Infer (Ct6 ctid orig x0 x1 x2 x3 x4 x5)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (App orig (Ct0 ctid orig) x0) x1) x2) x3) x4) x5))

// Infers Ct7
(Infer (Ct7 ctid orig x0 x1 x2 x3 x4 x5 x6)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (App orig (App orig (Ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6))

// Infers Ct8
(Infer (Ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (App orig (App orig (App orig (Ct0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7))

// Infers Fn0
(Infer (Fn0 ctid orig)) =
  (Checker.done (TypeOf ctid))

// Infers Fn1
(Infer (Fn1 ctid orig x0)) =
  (Infer (App orig (Fn0 ctid orig) x0))

// Infers Fn2
(Infer (Fn2 ctid orig x0 x1)) =
  (Infer (App orig (App orig (Fn0 ctid orig) x0) x1))

// Infers Fn3
(Infer (Fn3 ctid orig x0 x1 x2)) =
  (Infer (App orig (App orig (App orig (Fn0 ctid orig) x0) x1) x2))

// Infers Fn4
(Infer (Fn4 ctid orig x0 x1 x2 x3)) =
  (Infer (App orig (App orig (App orig (App orig (Fn0 ctid orig) x0) x1) x2) x3))

// Infers Fn5
(Infer (Fn5 ctid orig x0 x1 x2 x3 x4)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (Fn0 ctid orig) x0) x1) x2) x3) x4))

// Infers Fn6
(Infer (Fn6 ctid orig x0 x1 x2 x3 x4 x5)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (App orig (Fn0 ctid orig) x0) x1) x2) x3) x4) x5))

// Infers Fn7
(Infer (Fn7 ctid orig x0 x1 x2 x3 x4 x5 x6)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (App orig (App orig (Fn0 ctid orig) x0) x1) x2) x3) x4) x5) x6))

// Infers Fn8
(Infer (Fn8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7)) =
  (Infer (App orig (App orig (App orig (App orig (App orig (App orig (App orig (App orig (Fn0 ctid orig) x0) x1) x2) x3) x4) x5) x6) x7))

// Check Term Term : (Checker Unit)
// --------------------------------

// Checks Lam 
(Check (Lam orig name body) (All t_orig t_name t_type t_body)) =
  ask dep      = (Checker.bind Checker.get_depth)
  ask body_chk = (Checker.bind (Checker.extended (Check (body (Var orig name dep)) (t_body (Var orig t_name dep))) t_name t_type []))
  (Checker.done Unit)

// Checks Let
(Check (Let orig name expr body) type) =
  ask dep      = (Checker.bind Checker.get_depth)
  ask expr_typ = (Checker.bind (Infer expr))
  ask body_chk = (Checker.bind (Checker.extended (Check (body (Var orig name dep)) type) name expr_typ []))
  (Checker.done Unit)

// Checks Var
(Check (Var orig name index) type) =
  ask rhs = (Checker.bind Checker.get_right_hand_side)
  (If rhs
    (Check.compare (Var orig name index) type)
    (Checker.extend name type Nil))

// Checks others
(Check term type) =
  (Check.compare term type)

// Compares two terms for equality
(Check.compare term type) =
  ask term_typ = (Checker.bind (Infer term))
  ask is_equal = (Checker.bind (Equal term_typ type))
  (If is_equal
    (Checker.done Unit)
    (Checker.fail (TypeMismatch term type term_typ)))

// Check.verify Verifier (List Term) : (Checker Unit)
// --------------------------------------------------

(Check.verify (LHS arg args) (All orig name type body)) =
  ask arg_chk  = (Checker.bind (Check arg type))
  ask args_chk = (Checker.bind (Check.verify args (body arg)))
  (Checker.done Unit)
(Check.verify (LHS arg args) other) =
  (Checker.fail (TooManyArguments arg))
(Check.verify (RHS expr) type) =
  ask (Checker.bind (Checker.set_right_hand_side True))
  ask expr_chk = (Checker.bind (Check expr type))
  (Checker.done Unit)

// APP Term Term : Term
// ----------------------

(APP orig (Lam orig name fbody) argm) = (fbody argm)
(APP orig func                  argm) = (App orig func argm)

// LET Name Term Term : Term
// --------------------------

(LET orig name expr body) = (body expr)

// ANN Term Term : Term
// --------------------------

(ANN orig expr type) = expr

// Stringification
// ---------------

(Show (Var orig name index)) = (Text [
  (Show.name name)
])

(Show (Typ orig)) = (Text [
  "Type"
])

(Show (All orig name type body)) =
  (U60.if (== name 63) // underscore
    (Text [
      (Show type) " -> " (Show (body (Var orig name 0)))
    ])
    (Text [
      "(" (Show.name name) ": " (Show type) ") "
      (Show (body (Var orig name 0)))
    ]))

(Show (Lam orig name body)) = (Text [
  "@" (Show.name name) " "
  (Show (body (Var orig name 0)))
])

(Show (Let orig name expr body)) = (Text [
  "let " (Show.name name) " = " (Show (expr (Var orig name 0))) "; "
  (Show (body (Var orig name 0)))
])

(Show (Ann orig expr type)) = (Text [
  "{" (Show expr) " :: " (Show type) "}"
])

(Show (App orig func argm)) = (Text [
  "("
  (Show func) " "
  (Show argm)
  ")"
])

(Show (Ct0 ctid orig)) = (Text [
  (NameOf ctid)
])

(Show (Ct1 ctid orig x0)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0)
  ")"
])

(Show (Ct2 ctid orig x0 x1)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1)
  ")"
])

(Show (Ct3 ctid orig x0 x1 x2)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2)
  ")"
])

(Show (Ct4 ctid orig x0 x1 x2 x3)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3)
  ")"
])

(Show (Ct5 ctid orig x0 x1 x2 x3 x4)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4)
  ")"
])

(Show (Ct6 ctid orig x0 x1 x2 x3 x4 x5)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4) " "
  (Show x5)
  ")"
])

(Show (Ct7 ctid orig x0 x1 x2 x3 x4 x5 x6)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4) " "
  (Show x5) " "
  (Show x6)
  ")"
])

(Show (Ct8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4) " "
  (Show x5) " "
  (Show x6) " "
  (Show x7)
  ")"
])

(Show (Fn0 ctid orig)) = (Text [
  (NameOf ctid)
])

(Show (Fn1 ctid orig x0)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0)
  ")"
])

(Show (Fn2 ctid orig x0 x1)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1)
  ")"
])

(Show (Fn3 ctid orig x0 x1 x2)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2)
  ")"
])

(Show (Fn4 ctid orig x0 x1 x2 x3)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3)
  ")"
])

(Show (Fn5 ctid orig x0 x1 x2 x3 x4)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4)
  ")"
])

(Show (Fn6 ctid orig x0 x1 x2 x3 x4 x5)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4) " "
  (Show x5)
  ")"
])

(Show (Fn7 ctid orig x0 x1 x2 x3 x4 x5 x6)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4) " "
  (Show x5) " "
  (Show x6)
  ")"
])

(Show (Fn8 ctid orig x0 x1 x2 x3 x4 x5 x6 x7)) = (Text [
  "("
  (NameOf ctid) " "
  (Show x0) " "
  (Show x1) " "
  (Show x2) " "
  (Show x3) " "
  (Show x4) " "
  (Show x5) " "
  (Show x6) " "
  (Show x7)
  ")"
])

(Show.context ctx) =
  (Show.context.go ctx (Context.max_name_length ctx))

(Show.context.go Empty pad) = String.nil
(Show.context.go (Entry name type vals rest) pad) = (Text [
  (Show.context.type name type pad)
  (Show.context.vals name vals pad)
  (Show.context.go rest pad)
])

(Show.context.type name type pad) = (Text [
  "- " (String.pad_right (Show.name name) ' ' pad) " : " (Show type) Line
])

(Show.context.vals name Nil pad) = String.nil
(Show.context.vals name (Cons val vals) pad) = (Text [
  "- " (String.pad_right (Show.name name) ' ' pad) " = " (Show val) Line
  (Show.context.vals name vals pad)
])

// Show.u60 U60 : String
(Show.u60 n) = (Show.u60.build n String.nil)
  (Show.u60.build n str) = 
    let next = (String.cons (+ 48 (% n 10)) str)
    ((U60.if (< n 10) λx(x) λx(Show.u60.build (/ n 10) x)) next)

// Show.name U60 : String
(Show.name name) = (Show.name.go name String.nil)

// Show.name.go U60 String : String
(Show.name.go name chrs) =
  (U60.if (== name 0) chrs
    let val = (% name 64)
    let chr =
      (U60.if (== val 0) '.'
      (U60.if (& (<=  1 val) (<= val 10)) (+ (- val  1) '0')
      (U60.if (& (<= 11 val) (<= val 36)) (+ (- val 11) 'A')
      (U60.if (& (<= 37 val) (<= val 62)) (+ (- val 37) 'a')
      (U60.if (== val 63) '_' '?')))))
    (Show.name.go (/ name 64) (String.cons chr chrs)))

// API
// ---

API.check_all =
  let output = (API.output (List.reverse (API.check_functions Functions)))
  (If (String.is_empty output)
    (Text [ "All terms check." Line Line ])
    output)

API.run_main = (Text [
  (Show (FN0 Main. 0))
  Line Line
])

(API.check_functions Nil) = Nil
(API.check_functions (Cons f fs)) =
  let head = (Result f (API.check_function f))
  let tail = (API.check_functions fs)
  (Cons head tail)

(API.check_function func) =
  let vers = (Verify func)
  let type = (TypeOf func)
  (API.check_function.verifiers vers type)

(API.check_function.verifiers Nil type) = Nil
(API.check_function.verifiers (Cons verifier verifiers) type) =
  let head = ((Check.verify verifier type) Empty 0 False)
  let tail = (API.check_function.verifiers verifiers type)
  (Cons head tail)

(API.output Nil) =
  String.nil
(API.output (Cons (Result fnid checks) rest)) =
  (Text [
    (API.output.function fnid checks)
    (API.output rest)
  ])

(API.output.function fnid Nil) =
  String.nil
(API.output.function fnid (Cons (Checked ctx dep rhs val) checks)) =
  (API.output.function fnid checks)
(API.output.function fnid (Cons (Errored ctx err) checks)) =
  (Text [
    (Color "1") "[" (NameOf fnid) "] " (Color "0") Line
    (API.output.error err ctx) Line
    (API.output.function fnid checks)
  ])

(API.output.error (UnboundVariable term) ctx) =
  (Text [
    (Color "4") "Unbound Variable." (Color "0") Line
    (API.output.error.details ctx term)
  ])
(API.output.error (CantInferLambda term) ctx) =
  (Text [
    (Color "4") "Can't infer lambda." (Color "0") Line
    (API.output.error.details ctx term)
  ])
(API.output.error (TooManyArguments term) ctx) =
  (Text [
    (Color "4") "Too many arguments." (Color "0") Line
    (API.output.error.details ctx term)
  ])
(API.output.error (InvalidCall term) ctx) =
  (Text [
    (Color "4") "Invalid call." (Color "0") Line
    (API.output.error.details ctx term)
  ])
(API.output.error (TypeMismatch term expected detected) ctx) =
  (Text [
    (Color "4") "Type mismatch." (Color "0") Line
    "- Expected: " (Show expected) Line
    "- Detected: " (Show detected) Line
    (API.output.error.details ctx term)
  ])

(API.output.error.details ctx term) =
  let orig = (Term.get_origin term)
  (Text [
    (If (Context.is_empty ctx) "" (Text [
      (Color "4") "Context:" (Color "0") Line
      (Show.context ctx)
    ]))
    (Color "4") "Source:" (Color "0") Line
    "{{#"(Show.u60 (& orig 16777215))":"(Show.u60 (>> orig 24))"#}}" Line
  ])
  

// User-Defined Functions
// ----------------------
////INJECT////
