Bool : Type
  True  : Bool
  False : Bool

Nat : Type
  Zero             : Nat
  Succ (pred: Nat) : Nat

List (a: Type) : Type
  Nil  (a: Type)                       : {List a}
  Cons (a: Type) (x: a) (xs: {List a}) : {List a}

Not (a: Bool) : Bool {
  Not True  = False
  Not False = True
}

And (a: Bool) (b: Bool) : Bool {
  And True  True  = True
  And True  False = False
  And False True  = False
  And False False = False
}

Negate (xs: {List Bool}) : {List Bool} {
  Negate {Cons Bool x xs} = {Cons Bool (Not x) (Negate xs)}
  Negate {Nil Bool}       = {Nil Bool}
}

Double (x: Nat) : Nat {
  Double {Succ x} = {Succ {Succ (Double x)}}
  Double {Zero}   = {Zero}
}

// FIXME: this won't check since `a != t`
Tail (a: Type) (xs: {List a}) : {List a} {
  Tail a {Cons t x xs} = xs
}

The (x: Nat) : Type
Val (x: Nat) : {The x}

Main : {The {Succ {Succ Zero}}} =
  {Val (Double {Succ Zero})}









