#derive[match]
type Algebra.Laws.Inverse <t> <concat: (t -> t -> t)> <inverse: (t -> t)> <empty: t> {
  new (left_inverse: ((x : t) -> (Equal empty (concat x (inverse x))))) (right_inverse: ((x : t) -> (Equal empty (concat (inverse x) x))))
}

type Algebra.Magma <t: Type> {
  new (concat: (t -> t -> t))
}

type Algebra.Semigroup <t: Type> {
  new (magma: (Algebra.Magma Type)) (associativity: (Algebra.Laws.associativity.eta (Algebra.Magma.concat magma)))
}

Algebra.Group.concat <t> (group: (Algebra.Group t)) : (t -> t -> t)
Algebra.Group.concat t (Algebra.Group.new t_ monoid inverse inverse_proof) = (Algebra.Monoid.concat monoid)

Algebra.Laws.associativity.eta <t> (concat: (t -> t -> t)) : Type
Algebra.Laws.associativity.eta t concat = ((a : t) -> (b : t) -> (c : t) -> (Equal (concat (concat a b) c) (concat a (concat b c))))

type Algebra.Laws.Identity <t> <concat: (t -> t -> t)> <empty: t> {
  new (left_identity: ((x : t) -> (Equal x (concat empty x)))) (right_identity: ((x : t) -> (Equal x (concat x empty))))
}

Algebra.Monoid.empty <t> (monoid: (Algebra.Monoid t)) : t
Algebra.Monoid.empty t (Algebra.Monoid.new t_ sg empty id) = empty

type Algebra.Monoid <t: Type> {
  new (sg: (Algebra.Semigroup t)) (empty: t) (identity: (Algebra.Laws.Identity t (Algebra.Semigroup.concat sg) empty))
}

Algebra.Semigroup.concat <t> (semigroup: (Algebra.Semigroup t)) : (t -> t -> t)
Algebra.Semigroup.concat t (Algebra.Semigroup.new t_ magma assoc) = (Algebra.Magma.concat magma)

Algebra.Monoid.concat <t> (monoid: (Algebra.Monoid t)) : (t -> t -> t)
Algebra.Monoid.concat t (Algebra.Monoid.new t_ sg empty id) = (Algebra.Semigroup.concat sg)

Algebra.Magma.concat <t> (magma: (Algebra.Magma t)) : (t -> t -> t)
Algebra.Magma.concat t (Algebra.Magma.new t_ concat) = concat

Equal <t> (a: t) (b: t) : Type

type Algebra.Group <t> {
  new (monoid: (Algebra.Monoid t)) (invert: (t -> t)) (inverse: (Algebra.Laws.Inverse t (Algebra.Monoid.concat monoid) invert (Algebra.Monoid.empty monoid)))
}