Doit3times <x> (f: (x -> x)) (n: x) : x
Doit3times f n = (f (f (f n)))

Nat.zero : (Nat)

U60.to_nat (x: U60) : (Nat)
U60.to_nat 0 = (Nat.zero)
U60.to_nat n = (Nat.succ (U60.to_nat (- n 1)))

Nat.add (a: (Nat)) (b: (Nat)) : (Nat)
Nat.add (Nat.succ a) b = (Nat.succ (Nat.add a b))
Nat.add (Nat.zero) b = b

Nat.succ (pred: (Nat)) : (Nat)

Nat : Type

Main : _
Main = (let a = (Doit3times ((x => (Nat.mul x x)) :: Nat -> Nat) (U60.to_nat 2)); a)

Nat.mul (a: (Nat)) (b: (Nat)) : (Nat)
Nat.mul (Nat.succ a) b = (Nat.add (Nat.mul a b) b)
Nat.mul (Nat.zero) b = (Nat.zero)

Test_anon_fun : (Equal  (Nat.succ (Nat.succ (Nat.zero))) (U60.to_nat 5))
Test_anon_fun = ?

Equal <t> (a: t) (b: t) : Type
