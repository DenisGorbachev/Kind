#derive[match]
type Data.Nat {
    succ (pred: Data.Nat)
    zero
}

Run (n: Data.Nat) : Type
Run (Data.Nat.succ n) = Data.U60
Run (Data.Nat.zero)   = Data.U60

// Without type specification
Lero <t> (n: Data.Nat) (f: Run n) : Data.U60
Lero t1 n f =
    match Data.Nat n with f {
        succ => (+ f 2)
        zero => (+ f 1)
    }

Main : Data.U60
Main = Lero (Data.Nat.succ Data.Nat.zero) 1