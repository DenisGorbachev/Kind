#derive[match]
type Data.Maybe (a: Type) {
    some (val: a)
    none
}

Str : Type
Str.nil : Str

MotiveGen (n: Data.Maybe Data.U60) : Type
MotiveGen (Data.Maybe.some _) = Data.U60
MotiveGen Data.Maybe.none     = Str

Main : Data.U60
Main =
    match Data.Maybe t = Data.Maybe.some 3 {
        some => t.val
        none => Str.nil
    } : (x => MotiveGen x)