// MyType.new -(t: Type) -(u: Type) (a: U60) (b: U60) (c: t) (d: u) : (MyType t u)
ctr {MyType_new a b c d}

// MyType.swap -(t: Type) -(u: Type) (a: (MyType t u)) : (MyType u t)
fun (MyType_swap a) {
  (MyType_swap {MyType_new a b c d}) =
    {MyType_new b a d c}
}

// MyType.mix -(t: Type) -(u: Type) (a: (MyType t u)) (b: (MyType t u)) : (MyType t u)
fun (MyType_mix a b) {
  (MyType_mix {MyType_new aa ~ ac ~} {MyType_new ~ bb ~ bd}) =
    {MyType_new aa bb ac bd}
}

// MyType.get_c -(t: Type) -(u: Type) (a: (MyType t u)) : t
fun (MyType_get_c a) {
  (MyType_get_c {MyType_new ~ ~ c ~}) =
    c
}

// Main : _
fun (Main) {
  (Main) =
    let a = {MyType_new #0 #1 #2 #3};
    (MyType_get_c (MyType_mix a (MyType_swap (!@x {MyType_new x #5 #6 #7} #4))))
}

