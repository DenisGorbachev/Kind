MyStruct (t: Type) : Type
MyStruct.new <t: Type> (a: U60) (b: t) : MyStruct t

#inline
MyStruct.get_b <t> (x: MyStruct t) : t
MyStruct.get_b (MyStruct.new a b) = b

#inline
MyStruct.make <t> (n: U60) (x: t) (y: t) : MyStruct t
MyStruct.make 0 x y = MyStruct.new 0 x
MyStruct.make n x y = MyStruct.new 1 y

#inline
InlineFn <t> (n: U60) (b: MyStruct t) (c: MyStruct t) : t
InlineFn 0 (MyStruct.new 0 b) (MyStruct.new 0 y) = (MyStruct.get_b (MyStruct.make 0 b y))
InlineFn 0 (MyStruct.new a b) (MyStruct.new x y) = b
InlineFn 1 (MyStruct.new a b) (MyStruct.new x y) = y
InlineFn 2 b c = MyStruct.get_b (MyStruct.get_b (MyStruct.make 3 b c))
InlineFn n b c = MyStruct.get_b (MyStruct.get_b (MyStruct.make n c b))

#inline
CoolFn : U60 {
  let a0 = InlineFn 0 (MyStruct.new 1 2) (MyStruct.new 3 4)
  let a1 = InlineFn 1 (MyStruct.new 10 20) (MyStruct.new 30 40)
  let a2 = InlineFn 2 (MyStruct.new 100 200) (MyStruct.new 300 400)
  let a3 = InlineFn 3 (MyStruct.new 1000 2000) (MyStruct.new 3000 4000)
  (+ (+ (+ a0 a1) a2) a3)
}

SadFn : U60 {
  CoolFn
}